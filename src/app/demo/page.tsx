'use client'

import { useState, useEffect } from 'react'
import { motion } from 'framer-motion'
import {
  BookOpen,
  Sparkles,
  ArrowLeft,
  ArrowRight,
  Loader2,
  FileText,
  Download,
  Lock,
  Eye,
  Crown,
  CheckCircle
} from 'lucide-react'
import Link from 'next/link'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { Label } from '@/components/ui/label'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { ScrollArea } from '@/components/ui/scroll-area'
import { Badge } from '@/components/ui/badge'
import ReactMarkdown from 'react-markdown'
import remarkGfm from 'remark-gfm'

interface Chapter {
  number: number
  title: string
  keyPoints: string[]
  estimatedWords: number
  content?: string
  isLocked?: boolean
  isPreview?: boolean
  ahaMoment?: string
}

interface Outline {
  title: string
  subtitle?: string
  chapters: Chapter[]
}

export default function DemoPage() {
  const [step, setStep] = useState(1)
  const [topic, setTopic] = useState('')
  const [description, setDescription] = useState('')
  const [outline, setOutline] = useState<Outline | null>(null)
  const [selectedChapter, setSelectedChapter] = useState<number>(0)
  const [isGenerating, setIsGenerating] = useState(false)
  const [generatedChapters, setGeneratedChapters] = useState<Set<number>>(new Set())
  const [editingKeyPoints, setEditingKeyPoints] = useState(false)
  const [editingAhaMoment, setEditingAhaMoment] = useState(false)
  const [tempKeyPoints, setTempKeyPoints] = useState<string>('')
  const [tempAhaMoment, setTempAhaMoment] = useState<string>('')

  // Ï±ïÌÑ∞ Î≥ÄÍ≤Ω Ïãú Ìé∏Ïßë Î™®Îìú Ï¢ÖÎ£å
  useEffect(() => {
    setEditingKeyPoints(false)
    setEditingAhaMoment(false)
  }, [selectedChapter])

  // Îπ†Î•∏ ÏãúÏûë ÏòàÏãú
  const quickStartExamples = [
    {
      topic: "AI ÏãúÎåÄ ÏÉùÏ°¥ Ï†ÑÎûµ",
      description: "ChatGPTÏôÄ AI ÎèÑÍµ¨Îì§Ïù¥ ÏèüÏïÑÏßÄÎäî ÏãúÎåÄ, ÏßÅÏû•Ïù∏Í≥º ÌîÑÎ¶¨ÎûúÏÑúÎì§Ïù¥ AIÎ•º ÌôúÏö©Ìï¥ ÏóÖÎ¨¥ ÏÉùÏÇ∞ÏÑ±ÏùÑ 10Î∞∞ ÎÜíÏù¥Í≥† Í≤ΩÏüÅÎ†•ÏùÑ Í∞ñÏ∂îÎäî Ïã§Ï†Ñ Í∞ÄÏù¥ÎìúÏûÖÎãàÎã§. AIÎ•º ÎëêÎ†§ÏõåÌïòÏßÄ ÏïäÍ≥† ÎÇòÏùò Î¨¥Í∏∞Î°ú ÎßåÎìúÎäî Íµ¨Ï≤¥Ï†ÅÏù∏ Î∞©Î≤ïÏùÑ ÏïåÎ†§Ï§çÎãàÎã§."
    },
    {
      topic: "ÏõîÍ∏â Ïô∏ ÏàòÏûÖ ÎßåÎì§Í∏∞",
      description: "ÏßÅÏû•Ïù∏Îì§Ïù¥ Ìá¥Í∑º ÌõÑ 2-3ÏãúÍ∞ÑÏúºÎ°ú Ïõî 100ÎßåÏõê Ïù¥ÏÉÅÏùò Î∂ÄÏàòÏûÖÏùÑ ÎßåÎìúÎäî Ïã§Ï†Ñ Ï†ÑÎûµÏûÖÎãàÎã§. Ïò®ÎùºÏù∏ Í∞ïÏùò, ÎîîÏßÄÌÑ∏ ÏΩòÌÖêÏ∏† ÌåêÎß§, Ïª®ÏÑ§ÌåÖ Îì± Ïã§Ï†ú ÏÑ±Í≥µ ÏÇ¨Î°ÄÏôÄ Îã®Í≥ÑÎ≥Ñ Ïã§Ìñâ Î∞©Î≤ïÏùÑ Îã¥ÏïòÏäµÎãàÎã§."
    },
    {
      topic: "ÌïòÎ£® 1ÏãúÍ∞Ñ ÏòÅÏñ¥ Í≥µÎ∂ÄÎ≤ï",
      description: "Î∞îÏÅú ÏßÅÏû•Ïù∏ÎèÑ ÌïòÎ£® 1ÏãúÍ∞ÑÏúºÎ°ú 6Í∞úÏõî ÎßåÏóê ÏòÅÏñ¥ ÌöåÌôî Ïã§Î†•ÏùÑ ÌöçÍ∏∞Ï†ÅÏúºÎ°ú Ìñ•ÏÉÅÏãúÌÇ§Îäî Î∞©Î≤ïÏûÖÎãàÎã§. Î¨∏Î≤ï ÏïîÍ∏∞Í∞Ä ÏïÑÎãå Ïã§Ï†Ñ ÌöåÌôî Ï§ëÏã¨ÏúºÎ°ú, Í≤ÄÏ¶ùÎêú ÌïôÏäµÎ≤ïÍ≥º Íµ¨Ï≤¥Ï†ÅÏù∏ Î£®Ìã¥ÏùÑ Ï†úÏãúÌï©ÎãàÎã§."
    }
  ]

  const loadExample = (example: typeof quickStartExamples[0]) => {
    setTopic(example.topic)
    setDescription(example.description)
  }

  const handleSaveKeyPoints = () => {
    if (!outline) return
    const points = tempKeyPoints.split('\n').filter(p => p.trim())
    const updatedChapters = [...outline.chapters]
    updatedChapters[selectedChapter].keyPoints = points
    setOutline({ ...outline, chapters: updatedChapters })
    setEditingKeyPoints(false)
  }

  const handleSaveAhaMoment = () => {
    if (!outline) return
    const updatedChapters = [...outline.chapters]
    updatedChapters[selectedChapter].ahaMoment = tempAhaMoment
    setOutline({ ...outline, chapters: updatedChapters })
    setEditingAhaMoment(false)
  }

  const handleStartEditKeyPoints = () => {
    setTempKeyPoints(outline?.chapters[selectedChapter].keyPoints.join('\n') || '')
    setEditingKeyPoints(true)
  }

  const handleStartEditAhaMoment = () => {
    setTempAhaMoment(outline?.chapters[selectedChapter].ahaMoment || '')
    setEditingAhaMoment(true)
  }

  const handleGenerateOutline = async () => {
    if (!topic || !description) return

    setIsGenerating(true)

    try {
      // Ïã§Ï†ú API Ìò∏Ï∂úÎ°ú ÏïÑÏõÉÎùºÏù∏ ÏÉùÏÑ±
      const response = await fetch('/api/generate-outline', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          topic,
          description,
          settings: { isDemo: true }
        })
      })

      if (!response.ok) throw new Error('Failed to generate outline')

      const data = await response.json()

      // ÌïòÏù¥Î∏åÎ¶¨Îìú Îç∞Î™® Î°úÏßÅ: Ï±ïÌÑ∞Î≥Ñ Í∂åÌïú ÏÑ§Ï†ï
      const chaptersWithPermissions = data.chapters.map((chapter: Chapter, index: number) => ({
        ...chapter,
        isLocked: index >= 3,      // 4Î≤àÏß∏ Ï±ïÌÑ∞Î∂ÄÌÑ∞ ÏôÑÏ†Ñ Ïû†Í∏à
        isPreview: index >= 1 && index < 3  // 2-3Î≤àÏß∏ Ï±ïÌÑ∞Îäî ÎØ∏Î¶¨Î≥¥Í∏∞Îßå
      }))

      setOutline({ ...data, chapters: chaptersWithPermissions })
      setStep(2)
    } catch (error) {
      console.error('Error generating outline:', error)
      // ÏóêÎü¨ Î∞úÏÉù Ïãú Í∏∞Î≥∏ ÏÉòÌîå Îç∞Ïù¥ÌÑ∞
      const sampleOutline: Outline = {
        title: `${topic}: ÏôÑÎ≤Ω Í∞ÄÏù¥Îìú`,
        chapters: Array.from({ length: 6 }, (_, i) => ({
          number: i + 1,
          title: `Chapter ${i + 1}`,
          keyPoints: ['Ìè¨Ïù∏Ìä∏ 1', 'Ìè¨Ïù∏Ìä∏ 2', 'Ìè¨Ïù∏Ìä∏ 3'],
          estimatedWords: 2500,
          isLocked: i >= 3,
          isPreview: i >= 1 && i < 3
        }))
      }
      setOutline(sampleOutline)
      setStep(2)
    } finally {
      setIsGenerating(false)
    }
  }

  const handleGenerateChapter = async (chapterIndex: number) => {
    if (!outline) return

    const chapter = outline.chapters[chapterIndex]

    // Ïû†Í∏àÎêú Ï±ïÌÑ∞Îäî ÏÉùÏÑ± Î∂àÍ∞Ä
    if (chapter.isLocked) {
      return
    }

    setIsGenerating(true)

    try {
      // ÎØ∏Î¶¨Î≥¥Í∏∞ Ï±ïÌÑ∞ (2-3Î≤à)Îäî ÏÉòÌîå Îç∞Ïù¥ÌÑ∞Îßå
      if (chapter.isPreview) {
        const previewContent = `# ${chapter.title}

## üîí ÎØ∏Î¶¨Î≥¥Í∏∞ Î™®Îìú

Ïù¥ Ï±ïÌÑ∞Îäî ÎØ∏Î¶¨Î≥¥Í∏∞ Î™®ÎìúÏûÖÎãàÎã§. Ïã§Ï†ú ÎÇ¥Ïö© Ï§ë ÏùºÎ∂ÄÎßå ÌôïÏù∏Ìï† Ïàò ÏûàÏäµÎãàÎã§.

## ${chapter.keyPoints[0]}

${chapter.keyPoints[0]}Ïóê ÎåÄÌïú ÎÇ¥Ïö©Ïù¥ Ïó¨Í∏∞Ïóê ÌëúÏãúÎê©ÎãàÎã§...

### ÌïµÏã¨ ÎÇ¥Ïö©
- Ï§ëÏöî Ìè¨Ïù∏Ìä∏ 1
- Ï§ëÏöî Ìè¨Ïù∏Ìä∏ 2
- Ï§ëÏöî Ìè¨Ïù∏Ìä∏ 3

---

## üìå ÌîÑÎ¶¨ÎØ∏ÏóÑÏúºÎ°ú ÏóÖÍ∑∏Î†àÏù¥ÎìúÌïòÏÑ∏Ïöî!

Ï†ÑÏ≤¥ ÎÇ¥Ïö©ÏùÑ Î≥¥Î†§Î©¥ ÌîÑÎ¶¨ÎØ∏ÏóÑ ÌîåÎûúÏúºÎ°ú ÏóÖÍ∑∏Î†àÏù¥ÎìúÌïòÏÑ∏Ïöî.

**ÌîÑÎ¶¨ÎØ∏ÏóÑ ÌîåÎûú ÌòúÌÉù:**
- ‚úÖ Î™®Îì† Ï±ïÌÑ∞ Ï†ÑÏ≤¥ ÎÇ¥Ïö© ÏÉùÏÑ±
- ‚úÖ Í≥†Í∏â AI Î™®Îç∏ (GPT-4, Claude Opus) ÏÇ¨Ïö©
- ‚úÖ PDF, EPUB, DOCX ÎÇ¥Î≥¥ÎÇ¥Í∏∞
- ‚úÖ Î¨¥Ï†úÌïú eBook ÏÉùÏÑ±

[ÏóÖÍ∑∏Î†àÏù¥ÎìúÌïòÍ∏∞ ‚Üí](/pricing)

*Ïù¥ ÎÇ¥Ïö©ÏùÄ ÎØ∏Î¶¨Î≥¥Í∏∞ÏûÖÎãàÎã§.*`

        const updatedChapters = [...outline.chapters]
        updatedChapters[chapterIndex].content = previewContent
        setOutline({ ...outline, chapters: updatedChapters })
        setGeneratedChapters(prev => new Set(prev).add(chapterIndex))
        setIsGenerating(false)
        return
      }

      // Ï≤´ Î≤àÏß∏ Ï±ïÌÑ∞Îßå Ïã§Ï†ú API Ìò∏Ï∂ú (Ïä§Ìä∏Î¶¨Î∞ç)
      const response = await fetch('/api/generate-chapter', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          bookTitle: outline.title,
          chapter,
          settings: {
            aiModel: 'gpt-3.5-turbo',
            language: 'ko',
            tone: 'professional',
            targetAudience: 'general',
            isDemo: true
          }
        })
      })

      if (!response.ok) throw new Error('Failed to generate chapter')

      // Ïä§Ìä∏Î¶¨Î∞ç ÏùëÎãµ Ï≤òÎ¶¨
      const reader = response.body?.getReader()
      const decoder = new TextDecoder()

      if (!reader) throw new Error('No reader available')

      let fullContent = ''

      while (true) {
        const { done, value } = await reader.read()
        if (done) break

        const chunk = decoder.decode(value, { stream: true })
        fullContent += chunk

        // Ïã§ÏãúÍ∞ÑÏúºÎ°ú UI ÏóÖÎç∞Ïù¥Ìä∏
        const updatedChapters = [...outline.chapters]
        updatedChapters[chapterIndex].content = fullContent
        setOutline({ ...outline, chapters: updatedChapters })
      }

      setGeneratedChapters(prev => new Set(prev).add(chapterIndex))
    } catch (error) {
      console.error('Error generating chapter:', error)
    } finally {
      setIsGenerating(false)
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-background to-secondary/20">
      {/* Navigation */}
      <nav className="border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
        <div className="container mx-auto px-4 h-16 flex items-center justify-between">
          <Link href="/" className="flex items-center space-x-2">
            <BookOpen className="w-6 h-6 text-primary" />
            <span className="font-bold text-xl">AI Book Writer</span>
          </Link>
          <div className="flex items-center space-x-4">
            <Badge variant="secondary" className="hidden sm:flex">
              <Sparkles className="w-3 h-3 mr-1" />
              Î¨¥Î£å Îç∞Î™® (1Í∞ú Ï±ïÌÑ∞ + ÎØ∏Î¶¨Î≥¥Í∏∞)
            </Badge>
            <Badge variant="secondary" className="sm:hidden">
              <Sparkles className="w-3 h-3 mr-1" />
              Îç∞Î™®
            </Badge>
            <Link href="/create">
              <Button variant="outline" size="sm">
                <Crown className="w-4 h-4 mr-2" />
                Ï†ÑÏ≤¥ Î≤ÑÏ†Ñ
              </Button>
            </Link>
            <Link href="/">
              <Button variant="ghost" size="sm">
                <ArrowLeft className="w-4 h-4 mr-2" />
                Ìôà
              </Button>
            </Link>
          </div>
        </div>
      </nav>

      <div className="container mx-auto px-4 py-8 max-w-6xl">
        {step === 1 ? (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
          >
            <Card>
              <CardHeader>
                <div className="space-y-2">
                  <Badge variant="outline" className="mb-2">
                    <Sparkles className="w-3 h-3 mr-1" />
                    ÏµúÏã† AI ÏóîÏßÑ
                  </Badge>
                  <CardTitle className="text-2xl">Ï†ÑÏûêÏ±Ö Ï£ºÏ†ú ÏÑ§Ï†ï</CardTitle>
                  <CardDescription>
                    AIÍ∞Ä ÎèÖÏûêÏóêÍ≤å <strong>"ÏïÑÌïò!"</strong> Î™®Î®ºÌä∏Î•º ÏÑ†ÏÇ¨ÌïòÎäî Ï†ÑÏûêÏ±ÖÏùÑ ÎßåÎì≠ÎãàÎã§
                  </CardDescription>
                </div>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-2">
                  <Label htmlFor="topic">Ï†ÑÏûêÏ±Ö Ï£ºÏ†ú</Label>
                  <Input
                    id="topic"
                    placeholder="Ïòà: AI ÏãúÎåÄ ÏÉùÏ°¥ Ï†ÑÎûµ, ÏõîÍ∏â Ïô∏ ÏàòÏûÖ ÎßåÎì§Í∏∞, Ìö®Ïú®Ï†ÅÏù∏ ÏãúÍ∞Ñ Í¥ÄÎ¶¨"
                    value={topic}
                    onChange={(e) => setTopic(e.target.value)}
                  />
                  <p className="text-xs text-muted-foreground">
                    üí° Íµ¨Ï≤¥Ï†ÅÏù¥Í≥† Î≥ÄÌôîÎ•º ÏïΩÏÜçÌïòÎäî Ï£ºÏ†úÏùºÏàòÎ°ù Ï¢ãÏäµÎãàÎã§
                  </p>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="description">ÏÉÅÏÑ∏ ÏÑ§Î™Ö</Label>
                  <Textarea
                    id="description"
                    placeholder="Ïù¥ Ï†ÑÏûêÏ±ÖÏùÑ ÏùΩÎäî ÎèÖÏûêÍ∞Ä Ïñ¥Îñ§ Î¨∏Ï†úÎ•º Ìï¥Í≤∞ÌïòÍ≥†, Ïñ¥Îñ§ Î≥ÄÌôîÎ•º Í≤ΩÌóòÌïòÍ≤å Îê†ÍπåÏöî? Íµ¨Ï≤¥Ï†ÅÏúºÎ°ú ÏÑ§Î™ÖÌï¥Ï£ºÏÑ∏Ïöî.&#10;&#10;ÏòàÏãú: ÏßÅÏû•Ïù∏Îì§Ïù¥ Ìá¥Í∑º ÌõÑ 2-3ÏãúÍ∞ÑÏúºÎ°ú Ïõî 100ÎßåÏõê Ïù¥ÏÉÅÏùò Î∂ÄÏàòÏûÖÏùÑ ÎßåÎìúÎäî Ïã§Ï†Ñ Ï†ÑÎûµÍ≥º Íµ¨Ï≤¥Ï†ÅÏù∏ Î∞©Î≤ïÎì§ÏùÑ Îã®Í≥ÑÎ≥ÑÎ°ú ÏïåÎ†§Ï£ºÎäî Ï±ÖÏûÖÎãàÎã§."
                    rows={6}
                    value={description}
                    onChange={(e) => setDescription(e.target.value)}
                  />
                  <p className="text-xs text-muted-foreground">
                    üí° ÎèÖÏûêÏùò Î¨∏Ï†ú, Î™©Ìëú, Í∏∞ÎåÄÌïòÎäî Î≥ÄÌôîÎ•º Íµ¨Ï≤¥Ï†ÅÏúºÎ°ú ÏûëÏÑ±ÌïòÏÑ∏Ïöî
                  </p>
                </div>

                <div className="space-y-4">
                  <div className="bg-muted p-4 rounded-lg">
                    <h4 className="font-semibold mb-3 flex items-center">
                      <Sparkles className="w-4 h-4 mr-2" />
                      Îπ†Î•∏ ÏãúÏûë - ÏòàÏãúÎ°ú Ï≤¥ÌóòÌïòÍ∏∞
                    </h4>
                    <div className="grid gap-2">
                      {quickStartExamples.map((example, i) => (
                        <Button
                          key={i}
                          variant="outline"
                          size="sm"
                          className="justify-start text-left h-auto py-2"
                          onClick={() => loadExample(example)}
                        >
                          <div className="flex-1">
                            <div className="font-medium">{example.topic}</div>
                            <div className="text-xs text-muted-foreground mt-0.5 line-clamp-1">
                              {example.description.substring(0, 60)}...
                            </div>
                          </div>
                        </Button>
                      ))}
                    </div>
                  </div>

                  <div className="bg-muted p-4 rounded-lg">
                    <h4 className="font-semibold mb-2 flex items-center">
                      <Sparkles className="w-4 h-4 mr-2" />
                      Îç∞Î™® Î™®ÎìúÏóêÏÑú Í∞ÄÎä•Ìïú Í≤É
                    </h4>
                    <ul className="space-y-1 text-sm text-muted-foreground">
                      <li>‚úÖ Í≥†Í∏â AIÎ°ú ÎèÖÏûêÎ•º ÏÇ¨Î°úÏû°Îäî Î™©Ï∞® ÏÉùÏÑ±</li>
                      <li>‚úÖ Ï≤´ Ïù∏ÏÉÅÏùÑ Í∞ïÎ†¨ÌïòÍ≤å ÎßåÎìúÎäî 1Ïû• ÏÉùÏÑ±</li>
                      <li>üëÅÔ∏è 2-3Î≤àÏß∏ Ï±ïÌÑ∞ ÎØ∏Î¶¨Î≥¥Í∏∞</li>
                      <li>üîí ÎÇòÎ®∏ÏßÄ Ï±ïÌÑ∞Îäî ÌîÑÎ¶¨ÎØ∏ÏóÑ Ï†ÑÏö©</li>
                    </ul>
                  </div>
                </div>

                <Button 
                  className="w-full" 
                  size="lg"
                  onClick={handleGenerateOutline}
                  disabled={!topic || !description || isGenerating}
                >
                  {isGenerating ? (
                    <>
                      <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                      Î™©Ï∞® ÏÉùÏÑ± Ï§ë...
                    </>
                  ) : (
                    <>
                      Î™©Ï∞® ÏÉùÏÑ±ÌïòÍ∏∞
                      <ArrowRight className="w-4 h-4 ml-2" />
                    </>
                  )}
                </Button>
              </CardContent>
            </Card>
          </motion.div>
        ) : (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.5 }}
            className="grid lg:grid-cols-[400px_1fr] xl:grid-cols-[450px_1fr] gap-6"
          >
            {/* Î™©Ï∞® ÏÇ¨Ïù¥ÎìúÎ∞î */}
            <Card className="h-fit max-h-[calc(100vh-8rem)] sticky top-4">
              <CardHeader className="pb-4">
                <CardTitle className="text-lg">Î™©Ï∞®</CardTitle>
                <CardDescription>
                  <div className="font-semibold text-foreground leading-snug">{outline?.title}</div>
                  {outline?.subtitle && (
                    <div className="text-xs mt-1.5 leading-relaxed">{outline.subtitle}</div>
                  )}
                </CardDescription>
              </CardHeader>
              <CardContent className="pt-0">
                <ScrollArea className="h-[calc(100vh-20rem)] pr-4">
                  <div className="space-y-3 pb-2">
                    {outline?.chapters.map((chapter, index) => (
                      <motion.div
                        key={index}
                        initial={{ opacity: 0, x: -20 }}
                        animate={{ opacity: 1, x: 0 }}
                        transition={{ delay: index * 0.1 }}
                      >
                        <Button
                          variant={selectedChapter === index ? 'default' : 'ghost'}
                          className="w-full justify-start text-left relative h-auto py-3 px-4"
                          onClick={() => setSelectedChapter(index)}
                          disabled={chapter.isLocked}
                        >
                          <div className="flex items-start w-full gap-3">
                            <span className="font-bold text-base mt-0.5 shrink-0">{chapter.number}.</span>
                            <div className="flex-1 min-w-0">
                              <div className="font-medium flex items-center gap-2 leading-relaxed">
                                <span className="line-clamp-2">{chapter.title}</span>
                                {chapter.ahaMoment && (
                                  <Badge variant="default" className="text-xs shrink-0 ml-1">
                                    üí° ÏïÑÌïò!
                                  </Badge>
                                )}
                                {chapter.isLocked && <Lock className="w-3 h-3 shrink-0 ml-1" />}
                                {chapter.isPreview && <Eye className="w-3 h-3 shrink-0 ml-1" />}
                              </div>
                              <div className="text-xs text-muted-foreground mt-2">
                                ÏïΩ {chapter.estimatedWords.toLocaleString()}Ïûê
                              </div>
                            </div>
                            {generatedChapters.has(index) && (
                              <Badge variant="secondary" className="shrink-0">
                                <FileText className="w-3 h-3" />
                              </Badge>
                            )}
                          </div>
                        </Button>
                      </motion.div>
                    ))}
                  </div>
                </ScrollArea>
                
                <div className="mt-4 pt-4 border-t">
                  <Button 
                    variant="outline" 
                    className="w-full"
                    onClick={() => {
                      setStep(1)
                      setOutline(null)
                      setGeneratedChapters(new Set())
                    }}
                  >
                    <ArrowLeft className="w-4 h-4 mr-2" />
                    ÏÉàÎ°úÏö¥ Ï£ºÏ†úÎ°ú
                  </Button>
                </div>
              </CardContent>
            </Card>

            {/* ÏΩòÌÖêÏ∏† ÏòÅÏó≠ */}
            <Card>
              <CardHeader>
                <div className="flex justify-between items-start">
                  <div className="flex-1">
                    <div className="flex items-center gap-2 mb-2">
                      <CardTitle>
                        Chapter {outline?.chapters[selectedChapter].number}: {outline?.chapters[selectedChapter].title}
                      </CardTitle>
                      {outline?.chapters[selectedChapter].ahaMoment && (
                        <Badge variant="default" className="ml-2">
                          üí° ÏïÑÌïòÎ™®Î®ºÌä∏
                        </Badge>
                      )}
                    </div>
                    <div className="mt-4 p-4 bg-muted/50 rounded-lg border space-y-4">
                      {/* ÌïµÏã¨ Ìè¨Ïù∏Ìä∏ */}
                      <div>
                        <div className="flex items-center justify-between mb-2">
                          <div className="text-sm font-semibold text-foreground">üìå ÌïµÏã¨ Ìè¨Ïù∏Ìä∏</div>
                          {!editingKeyPoints && (
                            <Button
                              variant="ghost"
                              size="sm"
                              className="h-7 text-xs"
                              onClick={handleStartEditKeyPoints}
                            >
                              ÏàòÏ†ï
                            </Button>
                          )}
                        </div>
                        {editingKeyPoints ? (
                          <div className="space-y-2">
                            <Textarea
                              value={tempKeyPoints}
                              onChange={(e) => setTempKeyPoints(e.target.value)}
                              placeholder="Í∞Å Ï§ÑÏóê ÌïòÎÇòÏî© ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                              rows={4}
                              className="text-sm"
                            />
                            <div className="flex gap-2">
                              <Button size="sm" onClick={handleSaveKeyPoints}>Ï†ÄÏû•</Button>
                              <Button size="sm" variant="outline" onClick={() => setEditingKeyPoints(false)}>Ï∑®ÏÜå</Button>
                            </div>
                          </div>
                        ) : (
                          <div className="text-sm text-muted-foreground">
                            {outline?.chapters[selectedChapter].keyPoints.join(' ‚Ä¢ ')}
                          </div>
                        )}
                      </div>

                      {/* ÏïÑÌïòÎ™®Î®ºÌä∏ (Ï≤´ Ï±ïÌÑ∞Îßå) */}
                      {outline?.chapters[selectedChapter].number === 1 && (
                        <div>
                          <div className="flex items-center justify-between mb-2">
                            <div className="text-sm font-semibold text-primary flex items-center gap-1">
                              üí° ÌïµÏã¨ Ïù∏ÏÇ¨Ïù¥Ìä∏
                            </div>
                            {!editingAhaMoment && (
                              <Button
                                variant="ghost"
                                size="sm"
                                className="h-7 text-xs"
                                onClick={handleStartEditAhaMoment}
                              >
                                ÏàòÏ†ï
                              </Button>
                            )}
                          </div>
                          {editingAhaMoment ? (
                            <div className="space-y-2">
                              <Textarea
                                value={tempAhaMoment}
                                onChange={(e) => setTempAhaMoment(e.target.value)}
                                placeholder="ÎèÖÏûêÍ∞Ä Í≤ΩÌóòÌï† ÌïµÏã¨ Íπ®Îã¨ÏùåÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                                rows={3}
                                className="text-sm"
                              />
                              <div className="flex gap-2">
                                <Button size="sm" onClick={handleSaveAhaMoment}>Ï†ÄÏû•</Button>
                                <Button size="sm" variant="outline" onClick={() => setEditingAhaMoment(false)}>Ï∑®ÏÜå</Button>
                              </div>
                            </div>
                          ) : (
                            <div className="text-sm text-foreground">
                              {outline?.chapters[selectedChapter].ahaMoment || 'ÏïÑÌïòÎ™®Î®ºÌä∏Î•º Ï∂îÍ∞ÄÌïòÏÑ∏Ïöî'}
                            </div>
                          )}
                        </div>
                      )}
                    </div>
                  </div>
                  {outline?.chapters[selectedChapter].isLocked ? (
                    <Link href="/pricing">
                      <Button variant="default">
                        <Crown className="w-4 h-4 mr-2" />
                        ÌîÑÎ¶¨ÎØ∏ÏóÑÏúºÎ°ú ÏóÖÍ∑∏Î†àÏù¥Îìú
                      </Button>
                    </Link>
                  ) : (
                    <Button
                      onClick={() => handleGenerateChapter(selectedChapter)}
                      disabled={isGenerating || generatedChapters.has(selectedChapter)}
                    >
                      {isGenerating ? (
                        <>
                          <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                          ÏÉùÏÑ± Ï§ë...
                        </>
                      ) : generatedChapters.has(selectedChapter) ? (
                        <>
                          <FileText className="w-4 h-4 mr-2" />
                          Ïû¨ÏÉùÏÑ±
                        </>
                      ) : outline?.chapters[selectedChapter].isPreview ? (
                        <>
                          <Eye className="w-4 h-4 mr-2" />
                          ÎØ∏Î¶¨Î≥¥Í∏∞ Î≥¥Í∏∞
                        </>
                      ) : (
                        <>
                          <Sparkles className="w-4 h-4 mr-2" />
                          ÎÇ¥Ïö© ÏÉùÏÑ±
                        </>
                      )}
                    </Button>
                  )}
                </div>
              </CardHeader>
              <CardContent>
                <Tabs defaultValue="preview" className="w-full">
                  <TabsList className="w-full">
                    <TabsTrigger value="preview" className="flex-1">ÎØ∏Î¶¨Î≥¥Í∏∞</TabsTrigger>
                    <TabsTrigger value="markdown" className="flex-1">ÎßàÌÅ¨Îã§Ïö¥</TabsTrigger>
                  </TabsList>
                  
                  <TabsContent value="preview">
                    <ScrollArea className="h-[500px] w-full rounded-md border p-6">
                      {outline?.chapters[selectedChapter].isLocked ? (
                        <div className="flex flex-col items-center justify-center h-full text-center">
                          <Lock className="w-16 h-16 mb-4 text-muted-foreground" />
                          <h3 className="text-xl font-semibold mb-2">Ïû†Í∏¥ Ï±ïÌÑ∞</h3>
                          <p className="text-muted-foreground mb-6 max-w-md">
                            Ïù¥ Ï±ïÌÑ∞Îäî ÌîÑÎ¶¨ÎØ∏ÏóÑ ÌîåÎûúÏóêÏÑúÎßå Ïù¥Ïö©Ìï† Ïàò ÏûàÏäµÎãàÎã§.
                            <br />
                            ÏóÖÍ∑∏Î†àÏù¥ÎìúÌïòÏó¨ Î™®Îì† Ï±ïÌÑ∞Î•º ÏÉùÏÑ±ÌïòÍ≥† ÏôÑÏ†ÑÌïú eBookÏùÑ ÎßåÎì§Ïñ¥Î≥¥ÏÑ∏Ïöî.
                          </p>
                          <Link href="/pricing">
                            <Button size="lg">
                              <Crown className="w-5 h-5 mr-2" />
                              ÌîÑÎ¶¨ÎØ∏ÏóÑÏúºÎ°ú ÏóÖÍ∑∏Î†àÏù¥Îìú
                            </Button>
                          </Link>
                          <div className="mt-8 p-4 bg-muted rounded-lg max-w-md">
                            <h4 className="font-semibold mb-2">ÌîÑÎ¶¨ÎØ∏ÏóÑ ÌòúÌÉù</h4>
                            <ul className="text-sm text-left space-y-1">
                              <li>‚úÖ Î™®Îì† Ï±ïÌÑ∞ Ï†ÑÏ≤¥ ÏÉùÏÑ±</li>
                              <li>‚úÖ GPT-4, Claude Opus ÏÇ¨Ïö©</li>
                              <li>‚úÖ PDF/EPUB/DOCX ÎÇ¥Î≥¥ÎÇ¥Í∏∞</li>
                              <li>‚úÖ Î¨¥Ï†úÌïú eBook ÏÉùÏÑ±</li>
                            </ul>
                          </div>
                        </div>
                      ) : outline?.chapters[selectedChapter].content ? (
                        <div className="prose prose-sm dark:prose-invert max-w-none">
                          <ReactMarkdown remarkPlugins={[remarkGfm]}>
                            {outline.chapters[selectedChapter].content}
                          </ReactMarkdown>
                          {outline?.chapters[selectedChapter].isPreview && (
                            <div className="mt-6 p-4 border-2 border-primary rounded-lg bg-primary/5">
                              <h4 className="font-semibold mb-2 flex items-center">
                                <Eye className="w-5 h-5 mr-2" />
                                ÎØ∏Î¶¨Î≥¥Í∏∞ Î™®Îìú
                              </h4>
                              <p className="text-sm mb-4">
                                Ï†ÑÏ≤¥ ÎÇ¥Ïö©ÏùÑ Î≥¥Î†§Î©¥ ÌîÑÎ¶¨ÎØ∏ÏóÑÏúºÎ°ú ÏóÖÍ∑∏Î†àÏù¥ÎìúÌïòÏÑ∏Ïöî.
                              </p>
                              <Link href="/pricing">
                                <Button size="sm">
                                  <Crown className="w-4 h-4 mr-2" />
                                  ÏóÖÍ∑∏Î†àÏù¥ÎìúÌïòÍ∏∞
                                </Button>
                              </Link>
                            </div>
                          )}
                        </div>
                      ) : (
                        <div className="flex flex-col items-center justify-center h-full text-muted-foreground">
                          <FileText className="w-12 h-12 mb-4" />
                          <p className="text-center">
                            {outline?.chapters[selectedChapter].isPreview ? (
                              <>
                                'ÎØ∏Î¶¨Î≥¥Í∏∞ Î≥¥Í∏∞' Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌïòÏó¨
                                <br />ÏÉòÌîå ÏΩòÌÖêÏ∏†Î•º ÌôïÏù∏ÌïòÏÑ∏Ïöî
                              </>
                            ) : (
                              <>
                                'ÎÇ¥Ïö© ÏÉùÏÑ±' Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌïòÏó¨
                                <br />AIÍ∞Ä Ï±ïÌÑ∞ ÎÇ¥Ïö©ÏùÑ ÏûëÏÑ±ÌïòÎèÑÎ°ù ÌïòÏÑ∏Ïöî
                              </>
                            )}
                          </p>
                        </div>
                      )}
                    </ScrollArea>
                  </TabsContent>
                  
                  <TabsContent value="markdown">
                    <ScrollArea className="h-[500px] w-full rounded-md border">
                      <pre className="p-6 text-sm">
                        <code>
                          {outline?.chapters[selectedChapter].content || '// ÏïÑÏßÅ ÏÉùÏÑ±Îêú ÎÇ¥Ïö©Ïù¥ ÏóÜÏäµÎãàÎã§'}
                        </code>
                      </pre>
                    </ScrollArea>
                  </TabsContent>
                </Tabs>

                {generatedChapters.size === outline?.chapters.length && (
                  <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    className="mt-6 p-4 bg-primary/10 rounded-lg"
                  >
                    <h4 className="font-semibold mb-2 flex items-center">
                      <CheckCircle className="w-5 h-5 mr-2 text-primary" />
                      Î™®Îì† Ï±ïÌÑ∞ ÏÉùÏÑ± ÏôÑÎ£å!
                    </h4>
                    <p className="text-sm text-muted-foreground mb-4">
                      Ï†ÑÏûêÏ±ÖÏù¥ ÏôÑÏÑ±ÎêòÏóàÏäµÎãàÎã§. Ïã§Ï†ú ÏÑúÎπÑÏä§ÏóêÏÑúÎäî PDF, EPUB ÌòïÏãùÏúºÎ°ú Îã§Ïö¥Î°úÎìúÌï† Ïàò ÏûàÏäµÎãàÎã§.
                    </p>
                    <Button className="w-full" disabled>
                      <Download className="w-4 h-4 mr-2" />
                      Îã§Ïö¥Î°úÎìú (ÌîÑÎ¶¨ÎØ∏ÏóÑ Í∏∞Îä•)
                    </Button>
                  </motion.div>
                )}
              </CardContent>
            </Card>
          </motion.div>
        )}
      </div>
    </div>
  )
}